generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User
model User {
  id        String   @id @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email  String  @unique
  phone  String? @db.Char(13)
  bvn    String? @unique
  secret String?

  firstName   String
  lastName    String
  dateOfBirth DateTime? @db.Date

  isEmailVerified Boolean @default(false)
  isBvnVerified   Boolean @default(false)

  accounts Account[]
  debts    Debit[]
  budgets  Budget[]
}

// Account
model Account {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  number       String        @unique @db.Char(10)
  type         AccountType
  status       AccountStatus
  bankName     String
  bankCode     String
  openingDate  DateTime      @db.Date
  currencyCode String

  phone String? @db.Char(13)
  email String?

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid

  debts Debit[]
}

enum AccountStatus {
  Active
  Inactive
  Dormant
}

enum AccountType {
  Current
  Savings
  Fixed
}

// Debit
model Debit {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  description           String
  amount                Decimal @db.Money
  transferAccountNumber String  @db.Char(10)
  transferAccountName   String
  transferBankCode      String
  balanceAfter          Decimal @db.Money

  user          User    @relation(fields: [userId], references: [id])
  userId        String  @db.Uuid
  account       Account @relation(fields: [accountNumber], references: [number])
  accountNumber String  @db.Char(10)
}

// Budget
model Budget {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category    String
  totalAmount Decimal @db.Money
  spentAmount Decimal @default(0) @db.Money

  startDate DateTime  @db.Date
  endDate   DateTime? @db.Date

  status              BudgetStatus @default(Active)
  refreshCycle        String?
  currentCycleEndDate DateTime?    @db.Date

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid
}

enum BudgetStatus {
  Active
  Paused
  Completed
}
